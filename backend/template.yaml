---
AWSTemplateFormatVersion: "2010-09-09"

Description: |
  PhotoManager: v0.1.0 -
  PhotoManager Service with Amazon Rekognition

Parameters:
  BucketName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Amazon S3 bucket for image upload and processing
  PhotosBucketName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Amazon S3 bucket for photo stock
  IndexDynamoDBTableName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Amazon DynamoDB table to hold face metadata      
  PhotosDynamoDBTableName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9]*'
    Description: Name of Amazon DynamoDB table to hold photo collection      
  CollectionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: Name of Amazon Rekognition collection name     

Resources:
  # IAM execution role for ImageRekognition Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","s3","", "", !Ref BucketName]],  "/*"]]
          - Effect: Allow
            Action:
              - s3:*
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","s3","", "", !Ref PhotosBucketName]],  "/*"]]
          - Effect: Allow
            Action:
              - rekognition:*
            Resource: "*"
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","dynamodb",!Ref "AWS::Region", !Ref "AWS::AccountId"]],  ":table/", !Ref IndexDynamoDBTableName]]
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","dynamodb",!Ref "AWS::Region", !Ref "AWS::AccountId"]],  ":table/", !Ref PhotosDynamoDBTableName]]

  BootstrapExecutionRole:
    # IAM execution role for Bootstrap Lambda function
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: AmazonRekognition
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - rekognition:CreateCollection
              - rekognition:DeleteCollection
              - rekognition:ListCollections
            Resource: "*"          
      - PolicyName: AWSLambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"                  

  IndexDynamoDBTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "RekognitionId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "RekognitionId"
          KeyType: "HASH"         
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: 
        !Ref IndexDynamoDBTableName

  PhotosDynamoDBTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "10"
      TableName: 
        !Ref PhotosDynamoDBTableName

  IndexFaces:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: !Join ["-", [!Ref "AWS::StackName", "IndexFaces"]]
      Code:
        S3Bucket: midaisuk-templates
        S3Key: photomanager/faceindex.zip
      Description: Triggered by S3, indexes faces against a collection in Amazon Rekognition
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 5
      Environment:
        Variables:
          CollectionName: !Ref CollectionName
          IndexDynamoDBTableName: !Ref IndexDynamoDBTableName

  AddTags:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: !Join ["-", [!Ref "AWS::StackName", "AddTags"]]
      Code:
        S3Bucket: midaisuk-templates
        S3Key: photomanager/addtags.zip
      Description: Triggered by S3, add name and object tags to DynamoDB PhotosTable
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: 120
      Environment:
        Variables:
          CollectionName: !Ref CollectionName
          IndexDynamoDBTableName: !Ref IndexDynamoDBTableName
          PhotosDynamoDBTableName: !Ref PhotosDynamoDBTableName

      
  UploadBucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - RekognitionLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt IndexFaces.Arn
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: index/

  PhotosBucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - RekognitionLambdaPermission
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref PhotosBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AddTags.Arn
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: images/originals/

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref PhotosBucket
                - /*
      Bucket: !Ref PhotosBucket

  RekognitionLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      "Action": "lambda:invokeFunction"
      "FunctionName": !GetAtt IndexFaces.Arn
      "Principal": "s3.amazonaws.com"
      "SourceArn": !Join [":", ["arn","aws","s3","", "", !Ref BucketName]]  


  TagsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      "Action": "lambda:invokeFunction"
      "FunctionName": !GetAtt AddTags.Arn
      "Principal": "s3.amazonaws.com"
      "SourceArn": !Join [":", ["arn","aws","s3","", "", !Ref PhotosBucketName]]  


  LambdaCreateCollection:
    Type: "AWS::Lambda::Function" 
    Properties:
      Description: Custom resource function to create Rekognition collection
      FunctionName:
          Fn::Join: ["-", [!Ref "AWS::StackName", "CreateCollection"]]
      Handler: index.lambda_handler
      Role: !GetAtt [ BootstrapExecutionRole, Arn ]
      Runtime: python2.7
      Timeout: 10
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import cfnresponse
          import logging
          import traceback

          def lambda_handler(event, context):
              
                print ('received event:' + json.dumps(event, indent=2))
                
                rekognition = boto3.client('rekognition')
                logger = logging.getLogger()

                if event['RequestType'] == 'Delete':
                    try:
                        ret = rekognition.delete_collection(CollectionId='${CollectionName}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            print ('Resource deleted')
                            cfnresponse.send(event, context, "SUCCESS", {})
                        return
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                else:
                    try:
                        ret = rekognition.create_collection(CollectionId='${CollectionName}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            print ('Resource created')
                            cfnresponse.send(event, context, "SUCCESS", {})
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
               
  PopulateCreateCollection: 
    Type: "Custom::CreateCollection"
    Version: "1.0"
    Properties: 
      ServiceToken: !GetAtt LambdaCreateCollection.Arn        


Outputs:
  IndexDynamoDBTableName:
    Value: !Ref IndexDynamoDBTableName
    Description: Name of the DynamoDB table for face index
  PhotosDynamoDBTableName:
    Value: !Ref PhotosDynamoDBTableName
    Description: Name of the DynamoDB table for photo collection
  CollectionName:
    Value: !Ref CollectionName
    Description: Name of the Rekognition collection
  BucketName:
    Value: !Ref BucketName    
    Description: Name of the S3 bucket for face index
  PhotosBucketName:
    Value: !Ref PhotosBucketName    
    Description: Name of the S3 bucket for photo collection
